# Scala CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/sample-config/ for more details
#
version: 2.1
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: cat /dev/null | sbt test:compile

      - save_cache:
          paths:
            - ~/.ivy2/cache/
          key: v1-dependencies-{{ checksum "build.sbt" }}

      # run tests!
      - run: sbt coverage test coverageReport codacyCoverage
  deploy:
    steps:
      - setup_remote_docker
      - run:
          name: Build application Docker image
          command: |
            docker build -t kafka-api .
      - deploy:
          name: Push application Docker image
          command: |
            if [ "${CIRCLE_BRANCH}" != "release" ]; then
              if [ "${CIRCLE_PROJECT_USERNAME}" == "akkeris" ]; then
                docker login -u $DOCKER_LOGIN -p $DOCKER_PASS
                docker tag kafka-api "docker.io/akkeris/kafka-api:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
                docker push "docker.io/akkeris/kafka-api:${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
                if [ "${CIRCLE_BRANCH}" == "master" ]; then
                  docker tag kafka-api "docker.io/akkeris/kafka-api:release-${CIRCLE_BUILD_NUM}"
                  docker tag kafka-api "docker.io/akkeris/kafka-api:latest"
                  docker push "docker.io/akkeris/kafka-api:latest"
                  docker push "docker.io/akkeris/kafka-api:release-${CIRCLE_BUILD_NUM}"
                fi
              fi
            fi
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
        requires:
          - build